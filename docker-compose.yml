

services:
  # PostgreSQL service
  postgres:
    image: postgres:16.4  # You can specify any version of PostgreSQL
    container_name: postgres-container
    environment:
      POSTGRES_USER: user  # Default user for PostgreSQL
      POSTGRES_PASSWORD: password  # Password for the default user
      POSTGRES_DB: worker-app  # Name of the database
    ports:
      - "5431:5431"  # Expose PostgreSQL on port 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data  # Persist data

  # Spring Boot Application
  springboot:
    build: /home/scvitan/Desktop/worker-app-docker/work-app  # Path to your Spring Boot Dockerfile
    container_name: springboot-container
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/worker-app  # Connect to PostgreSQL service
      SPRING_DATASOURCE_USERNAME: user  # Database user
      SPRING_DATASOURCE_PASSWORD: mypassword  # Database password
    volumes:  
      - /home/scvitan/Desktop/worker-app-docker/work-app  # Mount the Spring Boot code into the containe
    ports:
      - "8080:8080"  # Expose Spring Boot app on port 8080
    depends_on:
      - postgres  # Ensure PostgreSQL is up before starting Spring Boot
  
      
  # Next.js Application
  nextjs:
    build:
      context: /home/scvitan/Desktop/worker-app-docker/worker-frontend  # Path to your Next.js app directory
      dockerfile: /home/scvitan/Desktop/worker-app-docker/worker-frontend/Dockerfile  # Specify the Next.js app's Dockerfile if needed
    container_name: nextjs-container
    environment:
      - NODE_ENV=production  # Run Next.js in production mode
      - NEXT_PUBLIC_API_URL=http://localhost:8080  # Set your API URL (point to your Spring Boot backend)
    ports:
      - "3000:3000"  # Expose Next.js app on port 3000
    depends_on:
      - springboot  # Ensure Spring Boot app is ready before starting Next.js
      
      
volumes:
  postgres-data:  # Named volume for PostgreSQL data persistence
